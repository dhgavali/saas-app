generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Leads {
  id                      Int     @id @default(autoincrement())
  domain                  String? @db.VarChar(255)
  description             String?
  platform                String? @db.VarChar(255)
  revenue                 String? @db.VarChar(255)
  country                 String? @db.VarChar(255)
  company_address         String?
  technologies            String?
  first_name              String? @db.VarChar(255)
  last_name               String? @db.VarChar(255)
  title                   String? @db.VarChar(255)
  email                   String? @db.VarChar(255)
  person_linkedin_url     String? @db.VarChar(255)
  departments             String? @db.VarChar(255)
  other_emails            String? @db.VarChar(255)
  company_name_for_emails String? @db.VarChar(255)
  corporate_phone         String? @db.VarChar(255)
  employees               Int?
  industry                String? @db.VarChar(255)
  company_linkedin_url    String? @db.VarChar(255)
  facebook_url            String? @db.VarChar(255)
  twitter_url             String? @db.VarChar(255)
  tiktok_url              String? @db.VarChar(255)
  city                    String? @db.VarChar(255)
  state                   String? @db.VarChar(255)
  total_funding           String? @db.VarChar(255)
  latest_funding          String? @db.VarChar(255)
  latest_funding_amount   String? @db.VarChar(255)

}



model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MyTable {
  id        String   @id @default(cuid())
  title     String
  content   String?
  createdAt DateTime @default(now())
}

model MyDocuments {
  id        String   @id @default(cuid())
  uploadId     String
  fileName   String?
  createdAt DateTime @default(now())
}



